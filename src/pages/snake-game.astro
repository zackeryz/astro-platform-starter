---
import Layout from '../layouts/Layout.astro';
import { useState } from 'astro/jsx-runtime';
---

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Snake Game</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            text-align: center;
            margin: 0;
            padding: 20px;
            background-color: #f0f0f0;
        }
        canvas {
            border: 2px solid #000;
            margin: 20px auto;
            display: block;
        }
        button {
            padding: 10px 20px;
            font-size: 16px;
            background-color: #4CAF50;
            color: white;
            border: none;
            cursor: pointer;
            border-radius: 5px;
        }
        button:disabled {
            background-color: #ccc;
            cursor: not-allowed;
        }
        #score {
            font-size: 20px;
        }
    </style>
</head>
<body>
    <h1>Snake Game</h1>
    <button id="startButton" onclick="startGame()">Start Game</button>
    <canvas id="snakeCanvas"></canvas>
    <p>Score: <span id="score">0</span></p>

    <script type="module">
        const canvas = document.getElementById("snakeCanvas");
        const ctx = canvas.getContext("2d");
        const gridSize = 20;
        const canvasSize = 400;
        canvas.width = canvasSize;
        canvas.height = canvasSize;

        let snake = [{ x: 8 * gridSize, y: 8 * gridSize }];
        let food = { x: 5 * gridSize, y: 5 * gridSize };
        let dx = gridSize;
        let dy = 0;
        let score = 0;
        let gameRunning = false;

        // Prevent default behavior of the arrow keys
        window.addEventListener('keydown', function(event) {
            if ([37, 38, 39, 40].includes(event.keyCode)) {
                event.preventDefault(); // Prevent scrolling
            }
        });

        function startGame() {
            // Reset game variables and start the game
            snake = [{ x: 8 * gridSize, y: 8 * gridSize }];
            food = { x: 5 * gridSize, y: 5 * gridSize };
            dx = gridSize;
            dy = 0;
            score = 0;
            gameRunning = true;
            document.getElementById("score").textContent = score;
            document.getElementById("startButton").disabled = true; // Disable the start button once the game starts
            setInterval(updateGame, 100);
        }

        function drawSnake() {
            snake.forEach((segment, index) => {
                ctx.fillStyle = index === 0 ? "green" : "lightgreen";
                ctx.fillRect(segment.x, segment.y, gridSize, gridSize);
            });
        }

        function moveSnake() {
            const head = { x: snake[0].x + dx, y: snake[0].y + dy };
            snake.unshift(head);
            if (head.x === food.x && head.y === food.y) {
                score += 10;
                document.getElementById("score").textContent = score;
                generateFood();
            } else {
                snake.pop();
            }
        }

        function generateFood() {
            const x = Math.floor(Math.random() * (canvasSize / gridSize)) * gridSize;
            const y = Math.floor(Math.random() * (canvasSize / gridSize)) * gridSize;
            food = { x, y };
        }

        function drawFood() {
            ctx.fillStyle = "red";
            ctx.fillRect(food.x, food.y, gridSize, gridSize);
        }

        function checkCollision() {
            const head = snake[0];
            if (head.x < 0 || head.x >= canvasSize || head.y < 0 || head.y >= canvasSize) {
                return true;
            }
            for (let i = 1; i < snake.length; i++) {
                if (snake[i].x === head.x && snake[i].y === head.y) {
                    return true;
                }
            }
            return false;
        }

        function updateGame() {
            if (!gameRunning) return; // Prevent the game from updating if not running
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            moveSnake();
            drawSnake();
            drawFood();
            if (checkCollision()) {
                alert("Game Over! Final Score: " + score);
                gameRunning = false;
                document.getElementById("startButton").disabled = false; // Re-enable the start button for a new game
            }
        }

        function changeDirection(event) {
            if (event.keyCode === 37 && dx === 0) {
                dx = -gridSize;
                dy = 0;
            } else if (event.keyCode === 38 && dy === 0) {
                dy = -gridSize;
                dx = 0;
            } else if (event.keyCode === 39 && dx === 0) {
                dx = gridSize;
                dy = 0;
            } else if (event.keyCode === 40 && dy === 0) {
                dy = gridSize;
                dx = 0;
            }
        }

        document.addEventListener("keydown", changeDirection);
    </script>
</body>
</html>
